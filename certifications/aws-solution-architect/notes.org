#+title: AWS Solution Architect

References:

[[https://www.youtube.com/watch?v=Ia-UEYYR44s][Free Code Camp]] tutorial
* Table of Content
1. +[[S3 (Object Storage)]]
2. +[[Snowball]]
3. +[[Virtual Private Cloud (VPC)]]
* AWS Certified Solutions Architect

** About the cert + exam
Valid 3 years, passing score 72%
To book an[[https://aws.amazon.com/certification/?nc2=sb_ce_co][exam]]

** S3 (Object Storage)
+ [[Table of Content]]
*** Intro
S3 stands for Simple Storage Services
Typically suitable for very large volumes of static data—especially unstructured data. Objects contains your data, they are like files (images, CVS, etc) ranging from 0 Bytes to 5 TB.
An S3 Bucket contains all of the objects.

*** Storage Classes
In order of costs and availability:
- S3 Standard
- S3 Intelligent-Tiering
- S3 Standard-IA (infrequent access)
  Recomended if you access the files less than once a month (retrival fees otherwise)
- S3 One Zone-IA
  Same a above but objects only exists in a single [[https://aws.amazon.com/about-aws/global-infrastructure/regions_az/][availability zone]] so reduced durability
- Glacier
  For data that is maybe used 1-2 a year
- Glacier Deep Archive
  Retrival times of 12 hours (stored on magnetic tape) recommended for data records (7-10 years)
  [[https://aws.amazon.com/s3/storage-classes/][References]]

*** Security
**** S3 policies
S3 bucket policies specify what actions are allowed or denied for which principals on the bucket that the bucket policy is attached to (e.g. allow user Alice to PUT but not DELETE objects in the bucket). TLDR Control access in S3 environment
#+begin_src json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "AWS": ["arn:aws:iam::111122223333:user/Alice",
                "arn:aws:iam::111122223333:root"]
      },
      "Action": "s3:*",
      "Resource": ["arn:aws:s3:::my_bucket",
                   "arn:aws:s3:::my_bucket/*"]
    }
  ]
#+end_src

**** S3 Access Control Lists
S3 ACLs is a legacy access control mechanism that predates IAM. An S3 ACL is a sub-resource that’s attached to every S3 bucket and object. It defines which AWS accounts or groups are granted access and the type of access. When you create a bucket or an object, Amazon S3 creates a default ACL that grants the resource owner full control over the resource.

**** S3 permissions
The following example bucket policy grants the s3:PutObject and the s3:PutObjectAcl permissions to a user (Dave). If you remove the Principal element, you can attach the policy to a user.
#+begin_src json options
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "statement1",
            "Effect": "Allow",
            "Principal": {
                "AWS": "arn:aws:iam::12345678901:user/Dave"
            },
            "Action": [
            "s3:PutObject",
            "s3:PutObjectAcl"
            ],
            "Resource": "arn:aws:s3:::awsexamplebucket1/*"
        }
    ]
}
#+end_src json
The following policy, when attached to a role/user allows full access to all s3 bucket in the account. If you need to access another account use `sts:AssumeRole`
#+begin_src json options
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "s3:*",
                "s3-object-lambda:*"
            ],
            "Resource": "*"
        }
    ]
}
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "VisualEditor0",
            "Effect": "Allow",
            "Action": "sts:AssumeRole",
            "Resource": "arn:aws:iam::{number}:role/{role-name}"
        }
    ]
}
#+end_src json
*** S3 Encryption
Uses AES-256 by default
- Encryption in transit (SSL/TLS)
- Server side encryption (SSE)
  * SSE-AES: S3 handles the key and uses AES-256
- Client side encryption

*** S3 Data Consistency
- New Objects (puts)
new S3 Objects can be read immediately after writting
- Overwrte (PUTS)/Delete Objects (DELETE)
  When you overwrite or delete an object it takes time for S3 to replicate versions to AZs

*** S3 Cross Region Replication (CRR)
Any Object will be automatically replicated to another region.
Must be enabled alongside versioning for both the source and destination. Works for multi-account.

*** S3 Versioning
Store all versions of an object in S3 ( cannot be disabled once activated ) kinda like Git
Every new object uploaded will be given a hversion ID unless versioning was off when they existed prior versioning

*** S3 Lifecycle Management
Automate the process of moving objects to different storage classes. Can be used with versioning. Usefull when data must be kept for record keeping.

*** S3 Transfer Acceleration
To transfer large files over long distances, users uses a distinct URL for an Edge location. Using AWS Backbone Network the edge location transfers to the S3 bucket.

*** S3 Presigned Urls
Generates a url which provides you temporary access to an object to either upload or download object data
`aws s3 presing s3://mybucket/myobject --expires-in 300`

*** S3 MFA delete
Multi Factor Authentification (MFA) which prevents users from deleting objects unless they provided their MFA code. Requires the following:
- AWS CLI must be used
- the bucket must have versioning turned on
#+begin_src bash options
aws s3api put-bucket-versioning \
--bucket bucketname \
--versioning-configuration Status=Enabled,MFADelete=Enabled \
--mfa "your mfa serical number "
#+end_src bash
Only the bucket owner can DELETE
*** TODO Monitoring (clouflair)
*** TODO Terraform
*** Misc
If Public and versioning is enabled, any new files version of an object will be set to private

*** S3 Follow along
[[https://youtu.be/Ia-UEYYR44s?t=1926][video]]

** Snowball
+ [[Table of Content]]
Petabyte transfer service (move data to AWS using a briefcase computer)
Essentially instead of transfering 50TB+ data over high speed internet we do so using that briefcase.
*** Snowball edge
Same with snowball but more storage and compute power (100TB) and can act as edge nodes. Can be clustered and specialized for storage/compute/GPU optimized
*** Snowmobile
Essentially AWS ships you a massive container w/ 100 PB

** Virtual Private Cloud (VPC)
+ [[Table of Content]]
Can be thought as your own personal data centre
#+attr_html: :alt  :align left :class img :width 500px
[[./images/aws-vpc.png][vpc general overview]]
*** Key features
VPC are region specific and you can have up to 5 per region
a maximum of 200 subnets per VPC are possible

*** About CIDR
Classless Inter-Domain Routing (CIDR) blocks are for specifying a range to IP addresses in format of IPv4 or IPv6
x, y, z and t are numbers from 0 to 255. Basically, each represents an 8 bit binary number. That's why it is range is up to 255. Combination of this numbers becomes an IPv4 IP address that must be unique to be able to identify a specific instance.

In case of AWS, p is a number from 16 to 28. It represents the number of bits that are inherited from given IP address. For example: 10.0.0.0/16 represents an IP address in following format: 10.0.x.y where x and y are any number from 0 to 255. So, actually it represents a range of IP addresses, starting from 10.0.0.0 to 10.0.255.255.

A CIDR range of 10.0.0.0/16 refers to all IP addresses that start with 10.0.x.x.

*** Dynamic Host Configuration Protocol (DHCP)

*** Default VPC
AWS has a default VPC in every region
Creates the following:
- Internet Gateway
- Default Security Group
- Default Network Access Control List (NACL)
- Associated default DHCP

*** VPC peering
Connects one VPC to another so that they behave like they are on the same network. You can not use one VPC as an intermediate to another and no overlapping CIDR blocks (check picture)
#+attr_html: :alt  :align left :class img :width 500px
#+caption: how to connect 2 VPC together
[[./images/vpc-peering.png][vpc-peering]]

*** Route Tables
Used to determine where network traffic is directed. Each subnet must be associated with a route-table
of note a record of 0.0.0.0/0 grants public access to everything from anywhere

*** Internet Gateway (IGW)
Does the following:
1. provides a target in your VPC route tables for internet-routable traffic (inside/outside)
2. proivdes Network Address Translation (NAT) for instances which have been assigned public ipv4 traffic

#+attr_html: :alt  :align left :class img :width 500px
#+caption: Diagram of IGW
[[./images/vpc-IGW.png][Internet Gateway]]

*** Bastion/Jumpbox
Bastions are security hardened EC2 instances designed to help you gain access to your EC2 instance in a private subnet.

#+attr_html: :alt  :align left :class img :width 500px
#+caption: How to configure a Bastion host
[[./images/vpc-bastion.png][bastion EC2 instance]]

**** Modern architecture relies on Session Manager
Only requires an IAM policy attached to the role/user
#+begin_src bash options
aws --profile <your-profile> ssm start-session --target i-<ec2-ID>
#+end_src bash
#+attr_html: :alt  :align left :class img :width 500px
#+caption: SSM architecture
[[./images/vpc-session-manager.png][SSM]]
A working example can be found [[https://medium.com/canisworks/aws-systems-manager-vs-bastion-hosts-for-private-networks-efe9a42f5ad7][here]].

*** Direct Connect
AWS solution to establishing dedicated network between on-premises (offices/home) and AWS. This is not the same

*** VPC Endpoints
Allows you to privately connect your VPC to other AWS services without leaving the AWS network.
Eliminates the need for Internet Gateway, NAT device, VPN connection
2 types:
**** interface endpoints
Elastic Network Interfaces (ENI) with a private IP addess. Thye ve as an entry point for traffic going to a supported service. Check AWS PrivateLink. Pay per GB tx
Wide applications (EC2 API)
**** Gateway endpoints
Is a gateway that is a targetfor a specific route in your route table. Free
Only supports S3 and DynamoDB

*** VPC Flowlogs
Allows for the capture of IP traffic information in-and-out of network interfaces within your VPC. Data is stored in CloudWatch logs.
Flow logs can be created for:
- VPC
- Subnets
- Network Interface
Always store the source and destination ip address (exam question)

*** Network Access Control List (NACL)
NACL acts as a virtual firewall at the subnet level. VPC automatically get a default NACL. It can =allow= or =deny= traffic unlike Security Groups which can only allow.
Highest rule # is 32766 but it is recommended to incremement from 0 to 10/100

**** Use case
A malicious actor at a specific IP address (normally they have rotating) is trying to access our instances. So you simply add the IP to the NACL and deny is same with port 22 (SSH) in the event that we will never ssh into the application.

*** Security Groups
You cannot block specific IP address with SG use the NACL instead.
Associated with EC2 instances, each SG contains a set of rules that filter inbound and outbound of EC2 instances. All traffic is blocked by default.
Multiple instances accross subnets can belong to a security group.

You can specify the source to be an IP range e.g 170.168.0.0/16 or source from another security group.
Instances can belong to multiple security groups. For example SG A has nothing written (denys all) and SG B located withing SG A has allow inbound:80/22 then SG A will allow both
**** Limits
Can have up to 10k SG in a region
can have 60 inbound and 60 outbound rules per SG
16 SG per Elastic Network Interface.

*** Network Address Translation (NAT)
Method of re-mapping one IP address space into another. Used to allow private networks outbound access to the internet. Allows for network deconflicting.

**** Instances vs Gateway
Instances (legacy) individual EC2 instances
Gateway is a managed service which launches redundant instances within the selected AZ.


*** VPC Follow along
[[https://www.youtube.com/watch?v=Ia-UEYYR44s&t=5004s][video]]

**** Notes
** Identity Access Management  (IAM)
*** Core components
- IAM users: end users who log into the console or interact with AWS ressources.
- IAM Groups: Group up your users so they all share permission levels: e.g. admin, Dev, Auditors
- IAM roles: Associates permissions to a role and then assign them to an user/group
- IAM policies: JSON documents which grants permissions for specific user/group/role to access service
  policies are attached to an IAM identiy
  Generally you want to attach policies to roles which are then attached to users/groups. Of course a user can use inline policy instead but its not reproductible.

*** Managed vs Customers vs inline Policy
- Managed policies: cannot be edited and are managed by AWS (orange)
- Customer Managed Policies: bread and butter of IAM.
- inline policy: policy directly attached to the user.

*** policy structure
- version: policy language version
- statement: container for hte policy elements can be an array []
- sid: statement identifier (optional) labelling
- effect: either allow or deny
- principal: acct, user , role or federated user
- Resource: which AWS resource is affected
- Condition: circumstances under which the policy grants permission

#+begin_src json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "AWS": ["arn:aws:iam::111122223333:user/Alice",
                "arn:aws:iam::111122223333:root"]
      },
      "Action": "s3:*",
      "Resource": ["arn:aws:s3:::my_bucket",
                   "arn:aws:s3:::my_bucket/*"]
    }
  ]
#+end_src
*** Password policy
IAM can set a password policy for a certain password length/char/etc and ask users to rotate every so often

*** Access keys
Allows users to interact with AWS service programmatically via the AWS CLI or AWS SDK. max 2 per users

*** MFA
CAnnot be enforced directly, but admin can restrict access to resources using policy requiring MFA.

** Cognito
Decentralized managed Authentification system for mobile + desktop apps.
#+attr_html: :alt  :align left :class img :width 500px
#+caption: cognito
[[./images/cognito.png][Cognito overview]]

*** Web Identity Federation andd Identity Provider (IdP)

**** Web Identity Federation
To exchange identiy and security information betweenan identity provider and an application.

**** Identiy Provider (IdP)
A trusted provider of your user identity taht lets you user their authentication to accesss other services. e.g. FB, Github, Google, etc.

uses SAML

*** Cognito Users Pools
User pools are user directories used to managed action for web/mobile apps such as sign-up/sign-in/acct recovery/ etc.
Successful identification generates a JWT token

*** Cognito Identity Pools
Provides temporary (with JWT) credentials to access services e.g. S3

*** Cognito Sync
sync user data and preferences across devices. Uses push synchronization. Uses Simple Notification Service (SNS) to send notification to all user devices.

** Domain Name System (DNS)
In AWS you can buy + manager a domain name with route53
Translates domain name e.g. github.com into a routable internet Protocol address e.g 138.12.123.01
Can use either IPv4 (32 bits) or IPv6 (128bits)

*** Domain Registrars
Authorities who have the ability to assign domain names under one or more top-lvel domains. Good examples are Namecheap.com/godaddy.com/AWS/etc.
Can use WhoIS database to see what the domain name leads to

*** Top level domains
example.co(top-lvl).uk (Second-lvl)
Top-level domains names are controlled by the internet Assigned Numbers Authority (IANA)
[[https://www.iana.org/domains/root/db][to query]]

*** Start of Authority (SOA)
Every domain must have a n SOA record. The SOA is a way for the Domain Admins to provide information about domain.

*** Address Records
Convert name of domain to an IP address

*** Canonical Names (CNAME)
Resolves one domain name to another rather than an IP address. Main advantage is that they are unlikely to change while IP addresses do.

*** Name server (NS)
Used by top-level domain servers to direct traffic to the DNS server containing the authoritztive DNS record. e.g. Route 53 would have 4 NS

*** Time to Live (TTL)
Length of time that a DNS record gets cached. I recommend 5 minutes

** Route53
AWS DNS service to register and manager domains. Think of namecheap but on steroids (especially if your infra is on AWS)
Decentralized managed Authentification system for mobile + desktop apps.

#+attr_html: :alt  :align left :class img :width 500px
#+caption: example complex Route53
[[./images/route53.png][Cognito overview]]

*** Alias record
routes traffic to specific AWS resources. Detects the change in IP address and ensure that its connected.

*** Routing policies
Best viewed through AWS =traffic flow=
**** Simple routing
default, multiple addresses result in random selection
e.g. the record =random.vandersleyen.dev= is tied to 3 different IP addresses
**** Weighted routing
traffic based on weighted values to split traffic
**** Latency-based routing
traffic to region resource with lowest latency
**** Failoever Routing
route traffic if primary endpoint is unhealthy
**** Geolocation Routing
traffic based on the location of the user
**** Geo-proximity Routing
Traffic based on the location of your resources.
**** Multi-value Answer Routing
respond to DNS queries with up to 8 healthy records
